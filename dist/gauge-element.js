Polymer('gauge-element', {
  created: function() {},
  ready: function() {
    var arkStartAngle, color, d, endAngle, i, j, len, paperHeight, paperWidth, ref;
    if (this.aperture < 180) {
      paperHeight = this.offsetWidth / 2 + 20;
    } else {

    }
    paperWidth = this.offsetWidth;
    this.paper = Raphael(this.$.gauge, paperWidth, paperHeight);
    this.arcs = this.paper.set();
    this.marks = this.paper.set();
    this.labels = this.paper.set();
    this.center = {
      x: this.offsetWidth / 2,
      y: this.offsetWidth / 2
    };
    this.startAngle = 90 + (360 - this.aperture) / 2;
    this.angle = this.aperture / (this.data.length - 1);
    arkStartAngle = this.startAngle - this.angle / 2;
    ref = this.data;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      d = ref[i];
      color = d.color ? d.color : void 0;
      endAngle = arkStartAngle + this.angle;
      switch (i) {
        case 0:
          this.drawArc(arkStartAngle + this.angle / 2, endAngle, 180, color);
          break;
        case this.data.length - 1:
          this.drawArc(arkStartAngle, endAngle - this.angle / 2, 180, color);
          break;
        default:
          this.drawArc(arkStartAngle, endAngle, 180, color);
      }
      arkStartAngle += this.angle;
    }
    this.drawMarks(190, (this.data.length - 1) * 10);
    this.drawLabels(190);
    return this.drawArrow(this.startAngle);
  },
  publish: {
    label: '',
    aperture: 270,
    data: []
  },
  drawArc: function(start, end, radius, color) {
    var arc, endAngle, startAngle;
    startAngle = this.getPointOnCircle(radius, start);
    endAngle = this.getPointOnCircle(radius, end);
    arc = this.paper.path("M" + startAngle.x + "," + startAngle.y + " A" + radius + "," + radius + " 0 0,1 " + endAngle.x + "," + endAngle.y);
    if (!color) {
      return arc.node.setAttribute('class', 'arc arc--default');
    } else {
      arc.node.setAttribute('class', 'arc arc--with-color');
      return arc.attr({
        "stroke": color
      });
    }
  },
  drawMarks: function(R, total) {
    var angle, i, j, mark, pos, ref, results;
    results = [];
    for (i = j = 0, ref = total; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      angle = this.aperture / total;
      pos = this.getPointOnCircle(R, angle * i);
      mark = this.paper.circle(pos.x, pos.y, 1).rotate(this.startAngle, this.center.x, this.center.y);
      results.push(mark.node.setAttribute('class', 'mark'));
    }
    return results;
  },
  drawLabels: function(R) {
    var d, i, j, label, labelPos, labelText, len, markEndPos, markStartPos, ref, results;
    ref = this.data;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      d = ref[i];
      markStartPos = this.getPointOnCircle(R, this.getArcCenter(i));
      markEndPos = this.getPointOnCircle(R + 5, this.getArcCenter(i));
      labelPos = this.getPointOnCircle(R + 15, this.getArcCenter(i));
      label = this.paper.path("M" + markStartPos.x + "," + markStartPos.y + " L" + markEndPos.x + "," + markEndPos.y + " z");
      label.node.setAttribute('class', 'label label__mark');
      if (typeof d === "number" || typeof d === "string") {
        labelText = this.paper.text(labelPos.x, labelPos.y, d);
      } else {
        labelText = this.paper.text(labelPos.x, labelPos.y, d.label);
      }
      results.push(labelText.node.setAttribute('class', 'label label__text'));
    }
    return results;
  },
  drawArrow: function(angle) {
    this.paper.circle(this.center.x, this.center.y, 10).node.setAttribute('class', 'arrow arrow__base');
    this.arrow = this.paper.path("M" + this.center.x + "," + this.center.y + " m0,-5 l190,5 l-190,5 z").transform("r" + angle + "," + this.center.x + "," + this.center.y);
    return this.arrow.node.setAttribute('class', 'arrow');
  },
  rotateArrow: function(angle) {
    return this.arrow.animate({
      transform: "r" + angle + "," + this.center.x + "," + this.center.y
    }, 500, "<>");
  },
  getPointOnCircle: function(radius, angle) {
    return {
      x: this.center.x + radius * Math.cos(Math.PI * angle / 180),
      y: this.center.y + radius * Math.sin(Math.PI * angle / 180)
    };
  },
  getArcCenter: function(value) {
    return this.startAngle + this.angle * parseInt(value);
  },
  valueChanged: function(oldValue, newValue) {
    return this.rotateArrow(this.getArcCenter(newValue));
  },
  selectNext: function() {
    if (this.value < this.data.length - 1) {
      return this.value = parseInt(this.value) + 1;
    } else {
      return this.value = 0;
    }
  }
});

//# sourceMappingURL=data:application/json;base64,