Polymer('gauge-element', {
  created: function() {
    return console.log('gauge created');
  },
  ready: function() {
    var angle, arkStartAngle, color, d, endAngle, i, j, len, ref, startAngle;
    console.log("gauge ready");
    this.paper = Raphael(this.$.gauge, 400, 340);
    this.arcs = this.paper.set();
    this.marks = this.paper.set();
    this.center = {
      x: 200,
      y: 200
    };
    startAngle = 90 + (360 - this.aperture) / 2;
    angle = this.aperture / (this.data.length - 1);
    arkStartAngle = startAngle - angle / 2;
    this.drawMarks(50, (this.data.length - 1) * 10);
    ref = this.data;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      d = ref[i];
      color = d.color ? d.color : void 0;
      endAngle = arkStartAngle + angle;
      switch (i) {
        case 0:
          this.drawArc(arkStartAngle + angle / 2, endAngle, 180, color);
          break;
        case this.data.length - 1:
          this.drawArc(arkStartAngle, endAngle - angle / 2, 180, color);
          break;
        default:
          this.drawArc(arkStartAngle, endAngle, 180, color);
      }
      arkStartAngle += angle;
    }
    return this.drawArrow(startAngle);
  },
  publish: {
    label: '',
    aperture: 270,
    data: []
  },
  drawArc: function(start, end, radius, color) {
    var arc, endAngle, startAngle;
    startAngle = this.getPointOnCircle(radius, start);
    endAngle = this.getPointOnCircle(radius, end);
    arc = this.paper.path("M" + startAngle.x + "," + startAngle.y + " A" + radius + "," + radius + " 0 0,1 " + endAngle.x + "," + endAngle.y);
    if (color) {
      arc.node.setAttribute('class', 'arc arc--with-color');
      arc.attr({
        "stroke": color
      });
    } else {
      arc.node.setAttribute('class', 'arc arc--default');
    }
    return this.arcs.push(arc);
  },
  drawMarks: function(R, total) {
    var a, alpha, i, j, mark, ref, results;
    results = [];
    for (i = j = 0, ref = total; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      alpha = this.aperture / total;
      a = this.getPointOnCircle(190, alpha * i);
      mark = this.paper.circle(a.x, a.y, 1).rotate(90 + (360 - this.aperture) / 2, this.center.x, this.center.y);
      mark.node.setAttribute('class', 'mark');
      results.push(this.marks.push(mark));
    }
    return results;
  },
  drawArrow: function(angle) {
    this.paper.circle(this.center.x, this.center.y, 10).node.setAttribute('class', 'arrow arrow__base');
    this.arrow = this.paper.path("M" + this.center.x + "," + this.center.y + " m0,-5 l190,5 l-190,5 z").transform("r" + angle + "," + this.center.x + "," + this.center.y);
    return this.arrow.node.setAttribute('class', 'arrow');
  },
  rotateArrow: function(angle) {
    return this.arrow.transform("r" + angle + "," + this.center.x + "," + this.center.y);
  },
  getPointOnCircle: function(radius, angle) {
    return {
      x: this.center.x + radius * Math.cos(Math.PI * angle / 180),
      y: this.center.y + radius * Math.sin(Math.PI * angle / 180)
    };
  }
});

//# sourceMappingURL=data:application/json;base64,