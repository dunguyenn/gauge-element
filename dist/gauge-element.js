Polymer('gauge-element', {
  created: function() {
    return console.log('gauge created');
  },
  ready: function() {
    var arkStartAngle, color, d, endAngle, i, j, len, ref;
    console.log("gauge ready");
    this.paper = Raphael(this.$.gauge, 400, 340);
    this.arcs = this.paper.set();
    this.marks = this.paper.set();
    this.center = {
      x: 200,
      y: 200
    };
    this.startAngle = 90 + (360 - this.aperture) / 2;
    this.angle = this.aperture / (this.data.length - 1);
    arkStartAngle = this.startAngle - this.angle / 2;
    this.drawMarks(190, (this.data.length - 1) * 10);
    ref = this.data;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      d = ref[i];
      color = d.color ? d.color : void 0;
      endAngle = arkStartAngle + this.angle;
      switch (i) {
        case 0:
          this.drawArc(arkStartAngle + this.angle / 2, endAngle, 180, color);
          break;
        case this.data.length - 1:
          this.drawArc(arkStartAngle, endAngle - this.angle / 2, 180, color);
          break;
        default:
          this.drawArc(arkStartAngle, endAngle, 180, color);
      }
      arkStartAngle += this.angle;
    }
    return this.drawArrow(this.startAngle);
  },
  publish: {
    label: '',
    aperture: 270,
    data: []
  },
  selectNext: function() {
    if (this.value < this.data.length - 1) {
      return this.value = parseInt(this.value) + 1;
    } else {
      return this.value = 0;
    }
  },
  valueChanged: function(oldValue, newValue) {
    return this.rotateArrow(this.getArcCenter(newValue));
  },
  drawArc: function(start, end, radius, color) {
    var arc, endAngle, startAngle;
    startAngle = this.getPointOnCircle(radius, start);
    endAngle = this.getPointOnCircle(radius, end);
    arc = this.paper.path("M" + startAngle.x + "," + startAngle.y + " A" + radius + "," + radius + " 0 0,1 " + endAngle.x + "," + endAngle.y);
    if (color) {
      arc.node.setAttribute('class', 'arc arc--with-color');
      arc.attr({
        "stroke": color
      });
    } else {
      arc.node.setAttribute('class', 'arc arc--default');
    }
    return this.arcs.push(arc);
  },
  drawMarks: function(R, total) {
    var a, alpha, i, j, mark, ref, results;
    results = [];
    for (i = j = 0, ref = total; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      alpha = this.aperture / total;
      a = this.getPointOnCircle(R, alpha * i);
      mark = this.paper.circle(a.x, a.y, 1).rotate(this.startAngle, this.center.x, this.center.y);
      mark.node.setAttribute('class', 'mark');
      results.push(this.marks.push(mark));
    }
    return results;
  },
  drawArrow: function(angle) {
    this.paper.circle(this.center.x, this.center.y, 10).node.setAttribute('class', 'arrow arrow__base');
    this.arrow = this.paper.path("M" + this.center.x + "," + this.center.y + " m0,-5 l190,5 l-190,5 z").transform("r" + angle + "," + this.center.x + "," + this.center.y);
    return this.arrow.node.setAttribute('class', 'arrow');
  },
  rotateArrow: function(angle) {
    return this.arrow.animate({
      transform: "r" + angle + "," + this.center.x + "," + this.center.y
    }, 500, ">");
  },
  getPointOnCircle: function(radius, angle) {
    return {
      x: this.center.x + radius * Math.cos(Math.PI * angle / 180),
      y: this.center.y + radius * Math.sin(Math.PI * angle / 180)
    };
  },
  getArcCenter: function(value) {
    return this.startAngle + this.angle * parseInt(value);
  }
});

//# sourceMappingURL=data:application/json;base64,