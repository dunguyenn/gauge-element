Polymer('gauge-element', {
  created: function() {
    return console.log('gauge created');
  },
  ready: function() {
    var angle, arrowColor, color, d, endAngle, gaugeColor, i, j, len, ref, results, startAngle;
    console.log("gauge ready");
    arrowColor = "#1e98e4";
    gaugeColor = "#666";
    this.paper = Raphael(this.$.gauge, 400, 340);
    this.arrow = this.paper.path("M200,200 m5,0 L200,10 l-5,200 z").attr({
      "fill": arrowColor,
      "stroke-width": 0
    }).transform("r90,200,200");
    this.paper.circle(200, 200, 10).attr({
      "fill": arrowColor,
      "stroke-width": 0
    });
    console.log("aperture:" + this.aperture);
    startAngle = 90 + (360 - this.aperture) / 2;
    console.log("startAngle:" + startAngle);
    this.arrow.transform("...r" + startAngle + ",200,200");
    angle = this.aperture / this.data.length;
    console.log("angle:" + angle);
    ref = this.data;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      d = ref[i];
      endAngle = startAngle + angle;
      color = d.color != null ? d.color : gaugeColor;
      this.drawArc(startAngle, endAngle, 180, color);
      results.push(startAngle += angle);
    }
    return results;
  },
  publish: {
    label: '',
    aperture: 270,
    data: [],
    arcs: [],
    marks: []
  },
  drawArc: function(start, end, radius, color) {
    var endAngle, startAngle;
    startAngle = this.getPointOnCircle(200, 180, start);
    endAngle = this.getPointOnCircle(200, 180, end);
    return this.arcs.push(this.paper.path("M" + startAngle.x + "," + startAngle.y + " A" + radius + "," + radius + " 0 0,1 " + endAngle.x + "," + endAngle.y).attr({
      "stroke": color,
      "stroke-width": 4
    }));
  },
  drawMarks: function(R, total) {
    var a, alpha, i, j, ref, results, x, y;
    results = [];
    for (i = j = 0, ref = total; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      console.log(i);
      alpha = this.aperture / total;
      a = alpha * Math.PI / 180;
      x = 200 + R * Math.cos(a);
      y = 200 - R * Math.sin(a);
      results.push(this.marks.push(this.paper.circle(x, y, 5)));
    }
    return results;
  },
  getPointOnCircle: function(center, radius, angle) {
    return {
      x: center + radius * Math.cos(Math.PI * angle / 180),
      y: center + radius * Math.sin(Math.PI * angle / 180)
    };
  }
});

//# sourceMappingURL=data:application/json;base64,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bUJBRFM7RUFBQSxDQXJEWDtBQUFBLEVBOERBLGdCQUFBLEVBQWtCLFNBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsS0FBakIsR0FBQTtXQUNoQjtBQUFBLE1BQUEsQ0FBQSxFQUFHLE1BQUEsR0FBUyxNQUFBLEdBQVMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFJLENBQUMsRUFBTCxHQUFRLEtBQVIsR0FBYyxHQUF2QixDQUFyQjtBQUFBLE1BQ0EsQ0FBQSxFQUFHLE1BQUEsR0FBUyxNQUFBLEdBQVMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxJQUFJLENBQUMsRUFBTCxHQUFRLEtBQVIsR0FBYyxHQUF2QixDQURyQjtNQURnQjtFQUFBLENBOURsQjtDQURGLENBQUEsQ0FBQSIsImZpbGUiOiJnYXVnZS1lbGVtZW50LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiUG9seW1lciAnZ2F1Z2UtZWxlbWVudCcsXG4gIGNyZWF0ZWQ6IC0+XG4gICAgY29uc29sZS5sb2cgJ2dhdWdlIGNyZWF0ZWQnXG4jICAgIGNvbnNvbGUubG9nIEBcbiAgcmVhZHk6IC0+XG4gICAgY29uc29sZS5sb2cgXCJnYXVnZSByZWFkeVwiXG5cbiAgICBhcnJvd0NvbG9yID0gXCIjMWU5OGU0XCJcbiAgICBnYXVnZUNvbG9yID0gXCIjNjY2XCJcblxuICAgIEAucGFwZXIgPSBSYXBoYWVsKEAuJC5nYXVnZSwgNDAwLCAzNDApXG5cbiAgICBALmFycm93ID0gQC5wYXBlci5wYXRoKFwiTTIwMCwyMDAgbTUsMCBMMjAwLDEwIGwtNSwyMDAgelwiKS5hdHRyXG4gICAgICBcImZpbGxcIjogYXJyb3dDb2xvclxuICAgICAgXCJzdHJva2Utd2lkdGhcIjogMFxuICAgIC50cmFuc2Zvcm0oXCJyOTAsMjAwLDIwMFwiKVxuXG4gICAgQC5wYXBlci5jaXJjbGUoMjAwLDIwMCwxMCkuYXR0clxuICAgICAgXCJmaWxsXCI6IGFycm93Q29sb3JcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IDBcblxuICAgIGNvbnNvbGUubG9nIFwiYXBlcnR1cmU6XCIgKyBALmFwZXJ0dXJlXG5cbiAgICBzdGFydEFuZ2xlID0gOTAgKyAoMzYwIC0gQC5hcGVydHVyZSkvMlxuICAgIGNvbnNvbGUubG9nIFwic3RhcnRBbmdsZTpcIiArIHN0YXJ0QW5nbGVcblxuICAgIEAuYXJyb3cudHJhbnNmb3JtKFwiLi4uclwiICsgc3RhcnRBbmdsZSArIFwiLDIwMCwyMDBcIilcblxuICAgIGFuZ2xlID0gQC5hcGVydHVyZS9ALmRhdGEubGVuZ3RoXG4gICAgY29uc29sZS5sb2cgXCJhbmdsZTpcIiArIGFuZ2xlXG5cbiMgICAgQC5kcmF3TWFya3MoNTAsIDEwMClcblxuICAgIGZvciBkLCBpIGluIEAuZGF0YVxuICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgYW5nbGVcbiAgICAgIGNvbG9yID0gaWYgZC5jb2xvcj8gdGhlbiBkLmNvbG9yIGVsc2UgZ2F1Z2VDb2xvclxuICAgICAgQC5kcmF3QXJjKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCAxODAsIGNvbG9yKVxuICAgICAgc3RhcnRBbmdsZSArPSBhbmdsZVxuXG4gIHB1Ymxpc2g6XG4gICAgbGFiZWw6ICcnXG4gICAgYXBlcnR1cmU6IDI3MFxuICAgIGRhdGE6IFtdXG4gICAgYXJjczogW11cbiAgICBtYXJrczogW11cblxuICBkcmF3QXJjOiAoc3RhcnQsIGVuZCwgcmFkaXVzLCBjb2xvcikgLT5cbiAgICBzdGFydEFuZ2xlID0gQC5nZXRQb2ludE9uQ2lyY2xlIDIwMCwgMTgwLCBzdGFydFxuICAgIGVuZEFuZ2xlID0gQC5nZXRQb2ludE9uQ2lyY2xlIDIwMCwgMTgwLCBlbmRcblxuICAgIEAuYXJjcy5wdXNoIEAucGFwZXIucGF0aChcIk1cIiArIHN0YXJ0QW5nbGUueCArIFwiLFwiICsgc3RhcnRBbmdsZS55ICsgXCIgQVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDAsMSBcIiArIGVuZEFuZ2xlLnggKyBcIixcIiArIGVuZEFuZ2xlLnkpLmF0dHJcbiAgICAgIFwic3Ryb2tlXCI6IGNvbG9yXG4gICAgICBcInN0cm9rZS13aWR0aFwiOiA0XG5cbiAgZHJhd01hcmtzOiAoUiwgdG90YWwpIC0+XG4gICAgZm9yIGkgaW4gWzAuLnRvdGFsXVxuICAgICAgY29uc29sZS5sb2cgaVxuICAgICAgYWxwaGEgPSBALmFwZXJ0dXJlIC8gdG90YWxcbiAgICAgIGEgPSBhbHBoYSAqIE1hdGguUEkgLyAxODBcbiAgICAgIHggPSAyMDAgKyBSICogTWF0aC5jb3MoYSlcbiAgICAgIHkgPSAyMDAgLSBSICogTWF0aC5zaW4oYSlcbiAgICAgIEAubWFya3MucHVzaCBALnBhcGVyLmNpcmNsZSh4LCB5LCA1KVxuXG4gIGdldFBvaW50T25DaXJjbGU6IChjZW50ZXIsIHJhZGl1cywgYW5nbGUpIC0+XG4gICAgeDogY2VudGVyICsgcmFkaXVzICogTWF0aC5jb3MoTWF0aC5QSSphbmdsZS8xODApXG4gICAgeTogY2VudGVyICsgcmFkaXVzICogTWF0aC5zaW4oTWF0aC5QSSphbmdsZS8xODApXG4iXX0=